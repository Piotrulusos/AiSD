using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Security.Permissions;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace sortowania
{
    public partial class Form1 : Form
    {
        int[] Convert(string napis)
        {
            if (napis == "")
            {
                return null;
            }
            var napisS = napis.Trim().Split(' ');
            var liczby = new int[napisS.Length];
            for (int i = 0; i < liczby.Length; i++)
            {
                liczby[i] = int.Parse(napisS[i]);
            }
            return liczby;
        }

        

        int[] PrzeslijtTab()
        {
            if (CheckBox.Checked == false)
            {
                string napis = TxBoxInput.Text;
                int[] liczby = Convert(napis);
                tabmain = liczby;
                return liczby;

            }
            else
            {
                int n = (int)numericUpDown1.Value;
                int[] tab = new int[n];
                Random random = new Random();
                for (int i = 0; i < n; i++)
                {
                    tab[i] = random.Next(0, 100);
                }
                tabmain = tab;
                return tab;
            }
        }
        int[] tabmain;

        
        public Form1()
        {
            InitializeComponent();

        }

     
        private void TxBoxInput_TextChanged(object sender, EventArgs e)
        {

        }

        private void CheckBox_CheckedChanged(object sender, EventArgs e)
        {
            PrzeslijtTab();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

       

        private void numericUpDown1_ValueChanged(object sender, EventArgs e)
        {

        }

        private void btnSs_Click(object sender, EventArgs e)
        {
            try
            {
                Stopwatch stopwatch = new Stopwatch();
                TxtBoxOutput.Text = "";
                int[] tab = PrzeslijtTab();
                stopwatch.Start();
                for (int j = 0; j < tab.Length - 1; j++)
                {
                    int index = j;
                    for (int i = j + 1; i < tab.Length; i++)
                    {
                        if (tab[index] > tab[i])
                        {
                            index = i;
                        }
                    }
                    int temp = tab[j];
                    tab[j] = tab[index];
                    tab[index] = temp;

                }
                string wynik = "";
                for (int i = 0; i < tab.Length; i++)
                {
                    wynik += tab[i].ToString();
                    wynik += " ";
                }
                TxtBoxOutput.Text = wynik;
                stopwatch.Stop();
                LabelTime2.Text = stopwatch.Elapsed.ToString();
            }
            catch (Exception)
            {
                LabelTime2.Text = "Error";
            }
            
        }

        private void btnBs_Click(object sender, EventArgs e)
        {
            try
            {
                Stopwatch stopwatch = new Stopwatch();

                TxtBoxOutput.Text = "";
                int[] tab = PrzeslijtTab();
                stopwatch.Start();
                bool cbd;
                do
                {
                    cbd = false;
                    for (int i = 0; i < tab.Length - 1; i++)
                    {
                        if (tab[i] > tab[i + 1])
                        {
                            int temp = tab[i];
                            tab[i] = tab[i + 1];
                            tab[i + 1] = temp;
                            cbd = true;
                        }
                    }
                } while (cbd);
                stopwatch.Stop();
                string wynik = "";
                for (int i = 0; i < tab.Length; i++)
                {
                    wynik += tab[i].ToString();
                    wynik += " ";
                }
                TxtBoxOutput.Text = wynik;
                LabelTime2.Text = stopwatch.Elapsed.ToString();
            }
            catch (Exception)
            {

                LabelTime2.Text = "Error";
            }
        }
        private void TxtBoxOutput_TextChanged(object sender, EventArgs e)
        {

        }

        private void btnGen_Click(object sender, EventArgs e)
        {
            TxtBoxOutput.Text = "";
            int[] tab = tabmain;
            
            for (int i = 0; i < tab.Length; i++)
            {
                TxtBoxOutput.Text += tab[i].ToString();
                TxtBoxOutput.Text += " ";
            }
        }

        private void btnIs_Click(object sender, EventArgs e)
        {
            try
            {
                Stopwatch stopwatch = new Stopwatch();

                TxtBoxOutput.Text = "";
                int[] tab = PrzeslijtTab();
                stopwatch.Start();
                int n = tab.Length;
                    for (int i = 1; i < n; ++i)
                    {
                        int key = tab[i];
                        int j = i - 1;
                        while (j >= 0 && tab[j] > key)
                        {
                            tab[j + 1] = tab[j];
                            j = j - 1;
                        }
                        tab[j + 1] = key;
                    }
                stopwatch.Stop();
                string wynik = "";
                for (int i = 0; i < tab.Length; i++)
                {
                    wynik += tab[i].ToString();
                    wynik += " ";
                }
                TxtBoxOutput.Text = wynik;
                LabelTime2.Text = stopwatch.Elapsed.ToString();
            }
            catch (Exception)
            {
                LabelTime2.Text = "Error";
            }
        }

        public  static void Merge(int[] tab, int left, int mid, int right)
        {
            int n1 = mid - left + 1;
            int n2 = right - mid;

            int[] leftArray = new int[n1];
            int[] rightArray = new int[n2];

            for (int i = 0; i < n1; i++)
            {
                leftArray[i] = tab[left + i];
            }

            for (int j = 0; j < n2; j++)
            {
                rightArray[j] = tab[mid + 1 + j];
            }

            int k = left;
            int l = 0;
            int r = 0;

            while (l < n1 && r < n2)
            {
                if (leftArray[l] <= rightArray[r])
                {
                    tab[k] = leftArray[l];
                    l++;
                }
                else
                {
                    tab[k] = rightArray[r];
                    r++;
                }
                k++;
            }

            while (l < n1)
            {
                tab[k] = leftArray[l];
                l++;
                k++;
            }

            while (r < n2)
            {
                tab[k] = rightArray[r];
                r++;
                k++;
            }
        }
        public static void Sort(int[] tab, int left, int right)
        {
            if (left < right)
            {
                int mid = (left + right) / 2;

                Sort(tab, left, mid);
                Sort(tab, mid + 1, right);

                Merge(tab, left, mid, right);
            }
        }

        public static void MergeSortAlgorithm(int[] tab)
        {
            int n = tab.Length;
            Sort(tab, 0, n - 1);
        }


        private void btnMs_Click(object sender, EventArgs e)
        {
            try
            {
                Stopwatch stopwatch = new Stopwatch();

                TxtBoxOutput.Text = "";
                int[] tab = PrzeslijtTab();
                stopwatch.Start();
                MergeSortAlgorithm(tab);
                stopwatch.Stop();
                string wynik = "";
                for (int i = 0; i < tab.Length; i++)
                {
                    wynik += tab[i].ToString();
                    wynik += " ";
                }
                TxtBoxOutput.Text = wynik;
                LabelTime2.Text = stopwatch.Elapsed.ToString();
            }
            catch (Exception)
            {

                LabelTime2.Text = "Error";
            }
        }

        public static void SortQs(int[] arr, int low, int high)
        {
            if (low < high)
            {
                int partitionIndex = PartitionQs(arr, low, high);

                SortQs(arr, low, partitionIndex - 1);
                SortQs(arr, partitionIndex + 1, high);
            }
        }

        public static int PartitionQs(int[] arr, int low, int high)
        {
            int pivot = arr[high];
            int i = (low - 1);

            for (int j = low; j < high; j++)
            {
                if (arr[j] < pivot)
                {
                    i++;
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }

            int swap = arr[i + 1];
            arr[i + 1] = arr[high];
            arr[high] = swap;

            return i + 1;
        }

        public static void QuickSortAlgorithm(int[] arr)
        {
            int n = arr.Length;
            SortQs(arr, 0, n - 1);
        }

        private void btnQs_Click(object sender, EventArgs e)
        {
            try
            {
                Stopwatch stopwatch = new Stopwatch();
                TxtBoxOutput.Text = "";
                int[] tab = PrzeslijtTab();
                stopwatch.Start();
                QuickSortAlgorithm(tab);
                stopwatch.Stop();
                string wynik = "";
                for (int i = 0; i < tab.Length; i++)
                {
                    wynik += tab[i].ToString();
                    wynik += " ";
                }
                TxtBoxOutput.Text = wynik;
                LabelTime2.Text = stopwatch.Elapsed.ToString();
            }
            catch (Exception)
            {

                LabelTime2.Text = "Error";
            }
        }
    }
}
